require 'spec_helper'

module Codebreaker
  Test = Class.new
  VAR1 = 1
  VAR2 = 'Variable 2'
  VAR3 = [VAR1, VAR2]

  describe Saver, :saver do
    it 'should be a Module' do
      expect(subject).to be_a Module
    end

    before(:each) do
      Test.include(subject)
      @test_obj = Test.new
      @test_obj.instance_variable_set('@var1', VAR1)
      @test_obj.instance_variable_set('@var2', VAR2)
      @test_obj.instance_variable_set('@var3', VAR3)
      @filename_auto = @test_obj.class.to_s.gsub(/[^A-z,1-9]/, '') + '.yml'
      @filename_custom = 'Custom.yml'
    end

    after(:each) do
      File.delete(@filename_auto) if File.exist?(@filename_auto)
      File.delete(@filename_custom) if File.exist?(@filename_custom)
    end

    let(:new_obj) do
      obj = Test.new
      obj.restore
      obj
    end

    describe '#save' do
      context 'when no options provided' do
        it 'saves context of calling object to file with autogenerated name' do
          expect { @test_obj.save }.to_not raise_error
          expect { File.open(@filename_auto, 'r') }.to_not raise_error
        end
      end

      context 'when filename provided' do
        it 'saves context of calling object to file with provided name' do
          expect { @test_obj.save(@filename_custom) }.to_not raise_error
          expect { File.open(@filename_custom, 'r') }.to_not raise_error
        end
      end

      context "when option 'only' provided" do
        it 'saves only given resource if one attribute is taken' do
          @test_obj.save(only: :var2)
          expect(new_obj.instance_variable_get(:@var1)).to be_nil
          expect(new_obj.instance_variable_get(:@var2)).to eq VAR2
          expect(new_obj.instance_variable_get(:@var3)).to be_nil
        end

        it 'saves only given resources if some attributes are taken' do
          @test_obj.save(only: [:var2, :var3])
          expect(new_obj.instance_variable_get(:@var1)).to be_nil
          expect(new_obj.instance_variable_get(:@var2)).to eq VAR2
          expect(new_obj.instance_variable_get(:@var3)).to eq VAR3
        end
      end

      context "when option 'except' provided" do
        it 'saves all resource except given if one attribute is taken' do
          @test_obj.save(except: :var2)
          expect(new_obj.instance_variable_get(:@var1)).to eq VAR1
          expect(new_obj.instance_variable_get(:@var2)).to be_nil
          expect(new_obj.instance_variable_get(:@var3)).to eq VAR3
        end

        it 'saves all resource except given if some attributes are taken' do
          @test_obj.save(except: [:var2, :var3])
          expect(new_obj.instance_variable_get(:@var1)).to eq VAR1
          expect(new_obj.instance_variable_get(:@var2)).to be_nil
          expect(new_obj.instance_variable_get(:@var3)).to be_nil
        end
      end
    end

    describe '#restore' do
      it 'restores saved state when no filename provided' do
        @test_obj.save
        expect(new_obj.instance_variable_get(:@var1)).to eq VAR1
        expect(new_obj.instance_variable_get(:@var2)).to eq VAR2
      end

      it 'restores saved state when filename provided' do
        @test_obj.save(@filename_custom)
        (new_obj = Test.new).restore(@filename_custom)
        expect(new_obj.instance_variable_get(:@var1)).to eq VAR1
        expect(new_obj.instance_variable_get(:@var2)).to eq VAR2
      end


      context "when option 'only' provided" do
        it 'restores only given resource if one attribute is taken' do
          @test_obj.save
          (new_obj=Test.new).restore(only: :var2)
          expect(new_obj.instance_variable_get(:@var1)).to be_nil
          expect(new_obj.instance_variable_get(:@var2)).to eq VAR2
          expect(new_obj.instance_variable_get(:@var3)).to be_nil
        end

        it 'restores only given resources if some attributes are taken' do
          @test_obj.save
          (new_obj=Test.new).restore(only: [:var2, :var3])
          expect(new_obj.instance_variable_get(:@var1)).to be_nil
          expect(new_obj.instance_variable_get(:@var2)).to eq VAR2
          expect(new_obj.instance_variable_get(:@var3)).to eq VAR3
        end
      end

      context "when option 'except' provided" do
        it 'restores all resource except given if one attribute is taken' do
          @test_obj.save
          (new_obj=Test.new).restore(except: :var2)
          expect(new_obj.instance_variable_get(:@var1)).to eq VAR1
          expect(new_obj.instance_variable_get(:@var2)).to be_nil
          expect(new_obj.instance_variable_get(:@var3)).to eq VAR3
        end

        it 'restores all resource except given if some attributes are taken' do
          @test_obj.save
          (new_obj=Test.new).restore(except: [:var2, :var3])
          expect(new_obj.instance_variable_get(:@var1)).to eq VAR1
          expect(new_obj.instance_variable_get(:@var2)).to be_nil
          expect(new_obj.instance_variable_get(:@var3)).to be_nil
        end
      end
    end
  end
end
