module Codebreaker

  Test = Class.new
  VAR1 = 1
  VAR2 = "Variable 2"

  describe Saver, :saver do
    it 'should be a Module' do
      expect(subject).to be_a Module
    end

    before(:each) do
      Test.include(subject)
      @test_obj = Test.new
      @test_obj.instance_variable_set("@var1", VAR1)
      @test_obj.instance_variable_set("@var2", VAR2)
      @filename_auto = @test_obj.class.to_s.gsub(/[^A-z,1-9]/,'') + '.yml'
      @filename_custom = 'Custom.yml'
    end

    after(:each) do
      File.delete(@filename_auto) if File.exist?(@filename_auto)
      File.delete(@filename_custom) if File.exist?(@filename_custom)
    end

    context '# save' do

      context 'if no options provided' do
        it 'saves context of calling object to file with autogenerated name' do
          expect { @test_obj.save }.to_not raise_error
          expect { File.open(@filename_auto, 'r') }.to_not raise_error
        end
      end

      context 'if filename provided' do
        it 'saves context of calling object to file with provided name' do
          expect { @test_obj.save(@filename_custom) }.to_not raise_error
          expect { File.open(@filename_custom, 'r') }.to_not raise_error
        end
      end
    end

    context '# restore' do
      it 'restores saved state' do
        @test_obj.save
        new_obj = Test.new
        new_obj.restore
        expect(new_obj.instance_variable_get(:@var1)).to eq VAR1
        expect(new_obj.instance_variable_get(:@var2)).to eq VAR2
      end
    end
  end
end